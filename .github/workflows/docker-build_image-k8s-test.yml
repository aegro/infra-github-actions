# Builds docker image and send to ecr
name: Build docker

on:
  workflow_call:
    inputs:
      REPO:
        description: 'ECR repository name'
        required: true
        type: string
      ENV:
        description: 'Application Environment'
        required: true
        type: string
      GIT-ENV:
        description: 'Git Environment'
        required: true
        type: string
      ARTIFACT:
        description: 'Artifact name'
        required: true
        type: string
      DOCKERFILE:
        description: 'Dockerfile path'
        required: false
        type: string
        default: './k8s-deploy/docker/Dockerfile'
      ARTI_PATH:
        description: 'Artifact path'
        required: false
        type: string
        default: '.'
      TIMEOUT:
        required: false
        type: number
        default: 10

jobs:
  docker-build_image:
    runs-on: ubuntu-latest
    timeout-minutes: ${{ inputs.TIMEOUT }}
    name: Docker Image
    environment: ${{ inputs.GIT-ENV }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_ID_BUILD_DOCKER }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_BUILD_DOCKER }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - uses: actions/checkout@v4
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.ARTIFACT }}
          path: ${{ inputs.ARTI_PATH }}
      - name: Docker build and push
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          if [ "$GITHUB_EVENT_NAME" == "pull_request" ]; then
              GITHUB_SHA=$(cat $GITHUB_EVENT_PATH | jq -r .pull_request.head.sha)
          fi
          TAG=${GITHUB_SHA}
          echo ${TAG} > job.output
          ECR_REPO=${{ inputs.REPO }}
          echo ${ECR_REPO} >> job.output
          docker image build . --file ${{ inputs.DOCKERFILE }} --build-arg ENV_BUILD=${{ inputs.ENV }} --tag ${ECR_REGISTRY}/${ECR_REPO}:${TAG}
          docker image push ${ECR_REGISTRY}/${ECR_REPO}:${TAG}
      - uses: actions/upload-artifact@v4
        with:
          name: docker-tag
          path: job.output